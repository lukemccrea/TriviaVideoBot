{
    var _ns_ = {
            id: 'fw.lib.macros',
            doc: void 0
        };
}
void 0;
void 0;
void 0;
void 0;
void 0;
void 0;
{
    var _ns_ = {
            id: 'fw.lib.parallel',
            doc: void 0
        };
    var fw_lib_util = require('./util');
    var isFn = fw_lib_util.isFn;
    var once = fw_lib_util.once;
    var filterEmpty = fw_lib_util.filterEmpty;
}
var iterator = function iterator(lambda, len) {
    return function () {
        var resultsø1 = [];
        var errorø1 = void 0;
        return function (err, result) {
            resultsø1.push(result);
            err ? errorø1 = err : void 0;
            return resultsø1.length === len ? isFn(lambda) ? lambda(errorø1, filterEmpty(resultsø1)) : void 0 : void 0;
        };
    }.call(this);
};
var parallel = exports.parallel = function parallel(arr, lambda) {
        return Array.isArray(arr) ? function () {
            var arrø2 = arr.slice();
            var lenø1 = arrø2.length;
            var nextø1 = iterator(lambda, lenø1);
            return arrø2.length === 0 ? isFn(lambda) ? lambda(void 0, []) : void 0 : arrø2.forEach(function (cur) {
                return isFn(cur) ? cur(once(nextø1)) : void 0;
            });
        }.call(this) : arr;
    };
var each = exports.each = function each(arr, lambda, cb) {
        return Array.isArray(arr) ? (function () {
            return function () {
                var stackø1 = arr.map(function (item) {
                        return function (done) {
                            return lambda(item, done);
                        };
                    });
                return parallel(stackø1, cb);
            }.call(this);
        })() : arr;
    };
var map = exports.map = each;
var eachParallel = exports.eachParallel = each;
var mapParallel = exports.mapParallel = each;