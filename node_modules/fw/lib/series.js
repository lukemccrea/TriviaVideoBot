{
    var _ns_ = {
            id: 'fw.lib.macros',
            doc: void 0
        };
}
void 0;
void 0;
void 0;
void 0;
void 0;
void 0;
{
    var _ns_ = {
            id: 'fw.lib.series',
            doc: void 0
        };
    var fw_lib_util = require('./util');
    var isFn = fw_lib_util.isFn;
    var once = fw_lib_util.once;
    var last = fw_lib_util.last;
    var isUniq = fw_lib_util.isUniq;
    var filterEmpty = fw_lib_util.filterEmpty;
}
var iterator = function iterator(arr) {
    return function () {
        var resultsø1 = [];
        return function next(err, result) {
            resultsø1.push(result);
            return err || isUniq(arr) ? last(arr)(err, filterEmpty(resultsø1)) : function () {
                var curø1 = arr.shift();
                return isFn(curø1) ? curø1(once(next), result) : void 0;
            }.call(this);
        };
    }.call(this);
};
var series = exports.series = function series(arr, lambda) {
        return Array.isArray(arr) ? function () {
            var arrø2 = arr.slice();
            arrø2.push(lambda ? lambda : function () {
                return void 0;
            });
            return iterator(arrø2)();
        }.call(this) : arr;
    };
var eachSeries = exports.eachSeries = function eachSeries(arr, lambda, cb) {
        return Array.isArray(arr) ? (function () {
            return function () {
                var stackø1 = arr.map(function (item) {
                        return function (done) {
                            return lambda(item, done);
                        };
                    });
                return series(stackø1, cb);
            }.call(this);
        })() : arr;
    };
var mapSeries = exports.mapSeries = eachSeries;